name: Nightly Scope-Replace: Scrape-only -> Upload -> Sitemap -> Vercel

on:
  schedule:
    - cron: "0 2 * * *" # 02:00 UTC nightly
  workflow_dispatch:

jobs:
  run-pipeline:
    runs-on: ubuntu-latest
    env:
      CI: "true"
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      # Python + Playwright (for the scraper)
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r scraper/requirements.txt

      - name: Install Playwright browsers (Chromium + OS deps)
        run: |
          python -m playwright install --with-deps chromium

      # Node (for sitemap)
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install Node deps (if package.json present)
        run: |
          if [ -f package-lock.json ]; then npm ci; elif [ -f package.json ]; then npm install; else echo "No package.json; skipping npm install"; fi

      # SCRAPER: Scope-Replace mode => scrape-only JSON, no DB writes here
      - name: Run scraper (scrape-only)
        run: |
          python scraper/scraper.py --scrape-only
        env:
          SERVICES: handyman

      # UPLOADER: UPSERT + scoped deletes (uses service role)
      - name: Run uploader (UPSERT + scoped deletes)
        run: |
          python scraper/upload_to_supabase.py --apply-deletes

      # SITEMAP: regenerate from live DB
      - name: Regenerate sitemap
        run: |
          npm run sitemap
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      # ARTIFACTS: keep last night's JSON + optional sitemap
      - name: Upload exports as artifact
        uses: actions/upload-artifact@v4
        with:
          name: scraper-exports-${{ github.run_id }}
          path: scraper/exports/*.json

      - name: Upload sitemap if present
        if: ${{ hashFiles('public/sitemap.xml') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: sitemap-${{ github.run_id }}
          path: public/sitemap.xml

      # VERCEL: trigger a deployment using the token + project slug secret
      - name: Trigger Vercel Deploy (Deployments API)
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT_SLUG: ${{ secrets.VERCEL_PROJECT_SLUG }}
        run: |
          if [ -z "${VERCEL_PROJECT_SLUG}" ]; then
            echo "VERCEL_PROJECT_SLUG not set; skipping Vercel deploy trigger."
            exit 0
          fi
          curl -fsS -X POST "https://api.vercel.com/v13/deployments" \
            -H "Authorization: Bearer ${VERCEL_TOKEN}" \
            -H "Content-Type: application/json" \
            --data-raw "{\"name\":\"${VERCEL_PROJECT_SLUG}\",\"project\":\"${VERCEL_PROJECT_SLUG}\"}" \
          || echo "Warning: Vercel deploy trigger failed; check VERCEL_TOKEN/VERCEL_PROJECT_SLUG or project link."
